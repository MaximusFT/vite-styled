import {
  index_esm_default
} from "./chunk-WSKKRZNX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-DFKQJ226.js";

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/@styled-system/core/dist/index.esm.js
var import_object_assign = __toESM(require_object_assign());
var merge = function merge2(a, b) {
  var result = (0, import_object_assign.default)({}, a, b);
  for (var key in a) {
    var _assign;
    if (!a[key] || typeof b[key] !== "object")
      continue;
    (0, import_object_assign.default)(result, (_assign = {}, _assign[key] = (0, import_object_assign.default)(a[key], b[key]), _assign));
  }
  return result;
};
var sort = function sort2(obj) {
  var next = {};
  Object.keys(obj).sort(function(a, b) {
    return a.localeCompare(b, void 0, {
      numeric: true,
      sensitivity: "base"
    });
  }).forEach(function(key) {
    next[key] = obj[key];
  });
  return next;
};
var defaults = {
  breakpoints: [40, 52, 64].map(function(n) {
    return n + "em";
  })
};
var createMediaQuery = function createMediaQuery2(n) {
  return "@media screen and (min-width: " + n + ")";
};
var get = function get2(obj, key, def, p, undef) {
  key = key && key.split ? key.split(".") : [key];
  for (p = 0; p < key.length; p++) {
    obj = obj ? obj[key[p]] : undef;
  }
  return obj === undef ? def : obj;
};
var createParser = function createParser2(config) {
  var cache = {};
  var parse = function parse2(props) {
    var styles = {};
    var shouldSort = false;
    var isCacheDisabled = props.theme && props.theme.disableStyledSystemCache;
    for (var key in props) {
      if (!config[key])
        continue;
      var sx = config[key];
      var raw = props[key];
      var scale = get(props.theme, sx.scale, sx.defaults);
      if (typeof raw === "object") {
        cache.breakpoints = !isCacheDisabled && cache.breakpoints || get(props.theme, "breakpoints", defaults.breakpoints);
        if (Array.isArray(raw)) {
          cache.media = !isCacheDisabled && cache.media || [null].concat(cache.breakpoints.map(createMediaQuery));
          styles = merge(styles, parseResponsiveStyle(cache.media, sx, scale, raw, props));
          continue;
        }
        if (raw !== null) {
          styles = merge(styles, parseResponsiveObject(cache.breakpoints, sx, scale, raw, props));
          shouldSort = true;
        }
        continue;
      }
      (0, import_object_assign.default)(styles, sx(raw, scale, props));
    }
    if (shouldSort) {
      styles = sort(styles);
    }
    return styles;
  };
  parse.config = config;
  parse.propNames = Object.keys(config);
  parse.cache = cache;
  var keys = Object.keys(config).filter(function(k) {
    return k !== "config";
  });
  if (keys.length > 1) {
    keys.forEach(function(key) {
      var _createParser;
      parse[key] = createParser2((_createParser = {}, _createParser[key] = config[key], _createParser));
    });
  }
  return parse;
};
var parseResponsiveStyle = function parseResponsiveStyle2(mediaQueries, sx, scale, raw, _props) {
  var styles = {};
  raw.slice(0, mediaQueries.length).forEach(function(value, i) {
    var media = mediaQueries[i];
    var style = sx(value, scale, _props);
    if (!media) {
      (0, import_object_assign.default)(styles, style);
    } else {
      var _assign2;
      (0, import_object_assign.default)(styles, (_assign2 = {}, _assign2[media] = (0, import_object_assign.default)({}, styles[media], style), _assign2));
    }
  });
  return styles;
};
var parseResponsiveObject = function parseResponsiveObject2(breakpoints, sx, scale, raw, _props) {
  var styles = {};
  for (var key in raw) {
    var breakpoint = breakpoints[key];
    var value = raw[key];
    var style = sx(value, scale, _props);
    if (!breakpoint) {
      (0, import_object_assign.default)(styles, style);
    } else {
      var _assign3;
      var media = createMediaQuery(breakpoint);
      (0, import_object_assign.default)(styles, (_assign3 = {}, _assign3[media] = (0, import_object_assign.default)({}, styles[media], style), _assign3));
    }
  }
  return styles;
};

// node_modules/@styled-system/variant/dist/index.esm.js
var variant = function variant2(_ref) {
  var _config;
  var scale = _ref.scale, _ref$prop = _ref.prop, prop = _ref$prop === void 0 ? "variant" : _ref$prop, _ref$variants = _ref.variants, variants = _ref$variants === void 0 ? {} : _ref$variants, key = _ref.key;
  var sx;
  if (Object.keys(variants).length) {
    sx = function sx2(value, scale2, props) {
      return index_esm_default(get(scale2, value, null))(props.theme);
    };
  } else {
    sx = function sx2(value, scale2) {
      return get(scale2, value, null);
    };
  }
  sx.scale = scale || key;
  sx.defaults = variants;
  var config = (_config = {}, _config[prop] = sx, _config);
  var parser = createParser(config);
  return parser;
};
var index_esm_default2 = variant;
var buttonStyle = variant({
  key: "buttons"
});
var textStyle = variant({
  key: "textStyles",
  prop: "textStyle"
});
var colorStyle = variant({
  key: "colorStyles",
  prop: "colors"
});
export {
  buttonStyle,
  colorStyle,
  index_esm_default2 as default,
  textStyle,
  variant
};
/*! Bundled license information:

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=@styled-system_variant.js.map
